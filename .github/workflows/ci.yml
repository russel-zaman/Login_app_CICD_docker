name: Pylint Flake8 CodeQL sonarCloud

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - dev
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '21 17 * * 2'

permissions:
  contents: read
  security-events: write
  packages: read
  actions: read

jobs:
  lint-and-test:
    name: Lint and flake8
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Python 3.10 (for running tests and linting)
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"

      # Install dependencies for linting and testing
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint pytest
          if [ -f app/requirements.txt ]; then pip install -r app/requirements.txt; fi

      # Fetch the latest changes from the main branch (for detecting changed files)
      - name: Fetch latest changes
        run: git fetch origin main --depth=1

      # Get the changed Python files between main and the current branch
      - name: Get changed files
        id: get_changed_files
        run: |
          CHANGED_FILES=$(git diff --name-only FETCH_HEAD HEAD -- '*.py')
          # Convert newline-separated file list into a space-separated list for linting
          CHANGED_FILES=$(echo "$CHANGED_FILES" | tr '\n' ' ')
          echo "CHANGED_FILES=$CHANGED_FILES" >> $GITHUB_ENV 

      # Lint with pylint (only for changed files)
      - name: Run linter
        run: |
          if [ -n "$CHANGED_FILES" ]; then
            pylint $CHANGED_FILES
          else
            echo "No Python files have changed."
          fi

      # Lint with flake8 (for all files)
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Run tests with pytest
      - name: Test with pytest
        run: |
          pytest

  analyze:
    name: CodeQL Analysis
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: python
            build-mode: none
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - if: matrix.build-mode == 'manual'
        shell: bash
        run: |
          echo 'Replace this with commands to build your code, e.g.:'
          echo '  make bootstrap'
          echo '  make release'
          exit 1

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}